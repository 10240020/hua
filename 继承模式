继承
  传统形式-->原型链
    过多的继承无用的属性
  借用构造函数
    不能继承借用构造函数的原型
    每次构造函数都要多走一个函数
  共享原型
     不能随意改动自己原型
  圣杯模式
  function inherit(Target,Origin){
      function f(){}
      f.prototype = Origin.prototype;
      Target.prototype = new F();
      Target.prototype.constuctor = Target//在继承目标身上人为设置原型自带属性constuctor
      Target.prototype.uber = Origin.prototype;//最终想查找原型最终初始最顶端的原型---超级父级
      }
      Father.prototype.listname = 'o';
      function Father () {}
      function son () {};
      inherit(son,Father);
      var son = new son();
      var Father = new Father();
  
闭包继承圣杯----->存在私有化变量
      var inherit = (function (){
        var F = function () {};//私有化变量,外部无法访问调用---->仅供自身属性调用访问.
        return function (Target,origin) {
            F.prototype = origin.prototype;
            Target.prototype = new F();
            Target.prototype.constuctor = Target;
            Target.prototype.uber = origin.prototype;
        }
      }());
 
 命名空间
     在局部定义方法--->再使用立即执行函数闭包调用该方法接口return function(){函数接口}可便于进行启动该方法--->好处：处于私有化变量
     不会污染全局变量.
 连续调用
     在每一个函数里面将其return this指向自己并将其返回为调用状态,进行多次调用

ECS6
let和const
与var声明区别是let/const拥有块作用域
    建议将let在代码块前声明
    用逗号分隔多个定义
let存在块作用域特性,变量只在块域中有效
块内部是可以访问到上一层作用域的变量
每一层都是独立的作用域,里层作用域可以声明外层作用域同名变量,但不会改变外层变量
let全局声明不存在于window中.var全局声明存在window中

const
使用const用来声明常量,这与其它语言差别不大,可以用来声明后台接口的url地址
常量名建议全部大写
只能声明一次变量
声明时必须同时赋值
不允许再次全新赋值
可以修改引用类型变量的值
拥有块、函数、全局作用域

Objcet.freeze---冻结变量
如果冻结变量后,变量也不可以修改,使用严格模式会出现报错

严格模式
基本差异--变量必须使用关键词声明,未声明的变量不允许赋值
强制声明防止全局污染--关键词不允许做变量声明
变量参数不允许重复定义--单独为函数设置严格模式
为了在多个文件合并时,防止全局设置严格模式对其他没使用严格模式文件的影响,将脚本放在一个执行函数中
解析差异
非严格模式可以不使用声明指令,严格模式下必须使用声明.所以建议使用let等声明.

this
函数预编译过程this————>window
全局作用域里this————>window
call和apply可以改变函数运行时this指向
obj.func(); func()里面的this指向Object;

arguments——>数组
arguments.callee————>指向函数自身引用

类数组
可以利用属性名模拟数组的特性
可以动态的增长length属性
如果强行让类数组调用push方法,则会根据length属性值的位置进行属性的扩充
属性要为索引属性,必须有length属性,最好加上push

一旦经历了var的操作,所得出的属性,window,这种属性叫做不可配置的属性,不可配置的属性delete无法删除;